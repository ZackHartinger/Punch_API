// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Punch_API.Models;

#nullable disable

namespace Punch_API.Migrations
{
    [DbContext(typeof(PunchDbContext))]
    partial class PunchDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppUserCompany", b =>
                {
                    b.Property<int>("AppUsersId")
                        .HasColumnType("int");

                    b.Property<int>("CompaniesCompanyId")
                        .HasColumnType("int");

                    b.HasKey("AppUsersId", "CompaniesCompanyId");

                    b.HasIndex("CompaniesCompanyId");

                    b.ToTable("AppUserCompany");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Punch_API.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            CompanyName = "Outdoors By Design"
                        });
                });

            modelBuilder.Entity("Punch_API.Models.EmployeeWorkDay", b =>
                {
                    b.Property<int>("EmployeeWorkDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeWorkDayId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<int>("LunchDuration")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("LunchTime")
                        .HasColumnType("time");

                    b.Property<int?>("Mileage")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("TruckName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeWorkDayId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeWorkDays");

                    b.HasData(
                        new
                        {
                            EmployeeWorkDayId = 1,
                            CompanyId = 1,
                            CreatedAt = new DateTime(2025, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerName = "Bourne",
                            Date = new DateOnly(2025, 4, 18),
                            EndTime = new TimeOnly(16, 30, 0),
                            IsNew = true,
                            LunchDuration = 30,
                            LunchTime = new TimeOnly(12, 0, 0),
                            StartTime = new TimeOnly(8, 0, 0),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Punch_API.Models.Invitation", b =>
                {
                    b.Property<int>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvitationId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvitationId");

                    b.ToTable("Invations");
                });

            modelBuilder.Entity("Punch_API.Models.Users.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Punch_API.Models.WorkDayTask", b =>
                {
                    b.Property<int>("WorkDayTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkDayTaskId"));

                    b.Property<int?>("EmployeeWorkDayId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkTaskId")
                        .HasColumnType("int");

                    b.HasKey("WorkDayTaskId");

                    b.HasIndex("EmployeeWorkDayId");

                    b.HasIndex("WorkTaskId");

                    b.ToTable("WorkDayTasks");

                    b.HasData(
                        new
                        {
                            WorkDayTaskId = 1,
                            EmployeeWorkDayId = 1,
                            WorkTaskId = 1
                        },
                        new
                        {
                            WorkDayTaskId = 2,
                            EmployeeWorkDayId = 1,
                            WorkTaskId = 2
                        },
                        new
                        {
                            WorkDayTaskId = 3,
                            EmployeeWorkDayId = 1,
                            WorkTaskId = 3
                        },
                        new
                        {
                            WorkDayTaskId = 4,
                            EmployeeWorkDayId = 1,
                            WorkTaskId = 4
                        });
                });

            modelBuilder.Entity("Punch_API.Models.WorkTask", b =>
                {
                    b.Property<int>("WorkTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkTaskId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("bit");

                    b.HasKey("WorkTaskId");

                    b.HasIndex("CompanyId");

                    b.ToTable("WorkTasks");

                    b.HasData(
                        new
                        {
                            WorkTaskId = 1,
                            Category = "General Labor",
                            CompanyId = 1,
                            Description = "Demoed landscape",
                            IsDeprecated = false
                        },
                        new
                        {
                            WorkTaskId = 2,
                            Category = "General Labor",
                            CompanyId = 1,
                            Description = "Installed bark",
                            IsDeprecated = false
                        },
                        new
                        {
                            WorkTaskId = 3,
                            Category = "General Labor",
                            CompanyId = 1,
                            Description = "Installed top soil",
                            IsDeprecated = false
                        },
                        new
                        {
                            WorkTaskId = 4,
                            Category = "General Labor",
                            CompanyId = 1,
                            Description = "Cleaned driveway/sidewalks",
                            IsDeprecated = false
                        },
                        new
                        {
                            WorkTaskId = 5,
                            Category = "Hardscape",
                            CompanyId = 1,
                            Description = "Prepped subbase",
                            IsDeprecated = false
                        },
                        new
                        {
                            WorkTaskId = 6,
                            Category = "Hardscape",
                            CompanyId = 1,
                            Description = "Set block/pavers/stone",
                            IsDeprecated = false
                        },
                        new
                        {
                            WorkTaskId = 7,
                            Category = "Hardscape",
                            CompanyId = 1,
                            Description = "Cut block/pavers/stone",
                            IsDeprecated = false
                        },
                        new
                        {
                            WorkTaskId = 8,
                            Category = "Irrigation",
                            CompanyId = 1,
                            Description = "Dug ditches",
                            IsDeprecated = false
                        },
                        new
                        {
                            WorkTaskId = 9,
                            Category = "Irrigation",
                            CompanyId = 1,
                            Description = "Plumbed lines",
                            IsDeprecated = false
                        },
                        new
                        {
                            WorkTaskId = 10,
                            Category = "Irrigation",
                            CompanyId = 1,
                            Description = "Adjusted heads",
                            IsDeprecated = false
                        });
                });

            modelBuilder.Entity("AppUserCompany", b =>
                {
                    b.HasOne("Punch_API.Models.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("AppUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Punch_API.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Punch_API.Models.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Punch_API.Models.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Punch_API.Models.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Punch_API.Models.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Punch_API.Models.EmployeeWorkDay", b =>
                {
                    b.HasOne("Punch_API.Models.Company", "Company")
                        .WithMany("EmployeeWorkDays")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Punch_API.Models.Users.AppUser", "User")
                        .WithMany("EmployeeWorkDays")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Punch_API.Models.WorkDayTask", b =>
                {
                    b.HasOne("Punch_API.Models.EmployeeWorkDay", "EmployeeWorkDay")
                        .WithMany("WorkDayTasks")
                        .HasForeignKey("EmployeeWorkDayId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Punch_API.Models.WorkTask", "WorkTask")
                        .WithMany("WorkDayTasks")
                        .HasForeignKey("WorkTaskId");

                    b.Navigation("EmployeeWorkDay");

                    b.Navigation("WorkTask");
                });

            modelBuilder.Entity("Punch_API.Models.WorkTask", b =>
                {
                    b.HasOne("Punch_API.Models.Company", "Company")
                        .WithMany("WorkTasks")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Punch_API.Models.Company", b =>
                {
                    b.Navigation("EmployeeWorkDays");

                    b.Navigation("WorkTasks");
                });

            modelBuilder.Entity("Punch_API.Models.EmployeeWorkDay", b =>
                {
                    b.Navigation("WorkDayTasks");
                });

            modelBuilder.Entity("Punch_API.Models.Users.AppUser", b =>
                {
                    b.Navigation("EmployeeWorkDays");
                });

            modelBuilder.Entity("Punch_API.Models.WorkTask", b =>
                {
                    b.Navigation("WorkDayTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
